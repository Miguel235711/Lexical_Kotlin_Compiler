.\lcases\l_68.kt
val VAL
empty Identifier
= ASSIGNMENT
"test" lineStringLiteral
. DOT
let Identifier
{ LCURL
customPrint Identifier
( LPAREN
it Identifier
) RPAREN
it Identifier
. DOT
isEmpty Identifier
( LPAREN
) RPAREN
} RCURL
println Identifier
( LPAREN
"is empty: $empty" lineStringLiteral
) RPAREN
fun FUN
printNonNull Identifier
( LPAREN
str Identifier
: COLON
String Identifier
? QUEST_NO_WS
) RPAREN
{ LCURL
println Identifier
( LPAREN
"Printing \"$str\":" lineStringLiteral
) RPAREN
str Identifier
? QUEST_NO_WS
. DOT
let Identifier
{ LCURL
print Identifier
( LPAREN
"\t" lineStringLiteral
) RPAREN
customPrint Identifier
( LPAREN
it Identifier
) RPAREN
println Identifier
( LPAREN
) RPAREN
} RCURL
} RCURL
fun FUN
printIfBothNonNull Identifier
( LPAREN
strOne Identifier
: COLON
String Identifier
? QUEST_NO_WS
, COMMA
strTwo Identifier
: COLON
String Identifier
? QUEST_NO_WS
) RPAREN
{ LCURL
strOne Identifier
? QUEST_NO_WS
. DOT
let Identifier
{ LCURL
firstString Identifier
-> ARROW
strTwo Identifier
? QUEST_NO_WS
. DOT
let Identifier
{ LCURL
secondString Identifier
-> ARROW
customPrint Identifier
( LPAREN
"$firstString:$secondString" lineStringLiteral
) RPAREN
println Identifier
( LPAREN
) RPAREN
} RCURL
} RCURL
} RCURL
printNonNull Identifier
( LPAREN
null NullLiteral
) RPAREN
printNonNull Identifier
( LPAREN
"my string" lineStringLiteral
) RPAREN
printIfBothNonNull Identifier
( LPAREN
"First" lineStringLiteral
, COMMA
"Second" lineStringLiteral
) RPAREN
