.\lcases\l_49.kt
const CONST
val VAL
POINTS_X_PASS Identifier
: COLON
Int Identifier
= ASSIGNMENT
15 IntegerLiteral
val VAL
EZPassAccounts Identifier
: COLON
MutableMap Identifier
< LANGLE
Int Identifier
, COMMA
Int Identifier
>= GE
mutableMapOf Identifier
( LPAREN
1 IntegerLiteral
to Identifier
100 IntegerLiteral
, COMMA
2 IntegerLiteral
to Identifier
100 IntegerLiteral
, COMMA
3 IntegerLiteral
to Identifier
100 IntegerLiteral
) RPAREN
val VAL
EZPassReport Identifier
: COLON
Map Identifier
< LANGLE
Int Identifier
, COMMA
Int Identifier
>= GE
EZPassAccounts Identifier
fun FUN
updatePointsCredit Identifier
( LPAREN
accountId Identifier
: COLON
Int Identifier
) RPAREN
{ LCURL
if IF
( LPAREN
EZPassAccounts Identifier
. DOT
containsKey Identifier
( LPAREN
accountId Identifier
) RPAREN
) RPAREN
{ LCURL
println Identifier
( LPAREN
"Updating $accountId..." lineStringLiteral
) RPAREN
EZPassAccounts Identifier
[ LSQUARE
accountId Identifier
] RSQUARE
= ASSIGNMENT
EZPassAccounts Identifier
. DOT
getValue Identifier
( LPAREN
accountId Identifier
) RPAREN
+ ADD
POINTS_X_PASS Identifier
} RCURL
else ELSE
{ LCURL
println Identifier
( LPAREN
"Error: Trying to update a non-existing account (id: $accountId)" lineStringLiteral
) RPAREN
} RCURL
} RCURL
fun FUN
accountsReport Identifier
( LPAREN
) RPAREN
{ LCURL
println Identifier
( LPAREN
"EZ-Pass report:" lineStringLiteral
) RPAREN
EZPassReport Identifier
. DOT
forEach Identifier
{ LCURL
k Identifier
, COMMA
v Identifier
-> ARROW
println Identifier
( LPAREN
"ID $k: credit $v" lineStringLiteral
) RPAREN
} RCURL
} RCURL
fun FUN
main Identifier
( LPAREN
) RPAREN
{ LCURL
accountsReport Identifier
( LPAREN
) RPAREN
updatePointsCredit Identifier
( LPAREN
1 IntegerLiteral
) RPAREN
updatePointsCredit Identifier
( LPAREN
1 IntegerLiteral
) RPAREN
updatePointsCredit Identifier
( LPAREN
5 IntegerLiteral
) RPAREN
accountsReport Identifier
( LPAREN
) RPAREN
} RCURL
